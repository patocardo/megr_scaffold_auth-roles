{"version":3,"sources":["utils/use-form-styles.tsx","components/DataWrapper.tsx","utils/use-previous.tsx","utils/use-multiple-delete.tsx","components/CellNumber.tsx","components/EnhancedTable.tsx","components/Roles.tsx"],"names":["useFormStyles","makeStyles","theme","createStyles","formControl","margin","spacing","minWidth","selectEmpty","marginTop","marginedTop","DataWrapper","props","items","children","emptyMessage","loadingMessage","Array","isArray","length","display","justifyContent","variant","gutterBottom","size","usePrevious","value","ref","useRef","useEffect","current","itemsReducer","state","action","collection","modelNames","getId","getItemText","getDeletionStrings","texts","future","verb","type","ids","modal","banner","payload","Error","filter","item","includes","map","useMultipleDelete","resolver","textArgs","useState","status","setStatus","useReducer","dispatchItems","useGraphQL","data","errors","fetchData","expression","join","isAuth","hasErrors","MultiDelCompo","open","onClose","aria-labelledby","aria-describedby","id","component","dense","line","key","keyGenerate","primary","onClick","color","autoFocus","severity","isOpen","closeFn","title","body","handleDelete","useStyles","integer","textAlign","width","leftSidePerc","decimal","CellNumber","leftSide","rightSide","classes","trimmed","toString","trim","Number","isNaN","match","parseInt","Box","className","descendingComparator","a","b","orderBy","EnhancedTableHead","onSelectAllClick","order","numSelected","rowCount","onRequestSort","headCells","TableHead","TableRow","TableCell","padding","Checkbox","indeterminate","checked","onChange","inputProps","headCell","align","numeric","disablePadding","sortDirection","TableSortLabel","active","direction","property","event","label","visuallyHidden","useToolbarStyles","root","paddingLeft","paddingRight","highlight","palette","secondary","main","backgroundColor","lighten","light","text","dark","flex","EnhancedTableToolbar","deleteFn","addFn","Toolbar","clsx","Typography","Tooltip","IconButton","aria-label","paper","marginBottom","table","border","clip","height","overflow","position","top","EnhancedTable","rows","editFn","idName","React","setOrder","setOrderBy","selected","setSelected","page","setPage","setDense","rowsPerPage","setRowsPerPage","emptyRows","Math","min","Paper","TableContainer","Table","target","newSelecteds","n","name","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","row","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","concat","handleClick","role","aria-checked","tabIndex","head","hidden","style","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","FormControlLabel","control","Switch","makeListExpression","term","Roles","rolesDisplay","setRolesDisplay","searchText","setSearchText","useDebounce","debouncedSearch","prevRolesData","roleId","description","mounted","history","useHistory","isEqual","newRoles","resolvers","rest","resolversCount","message","container","justify","xs","sm","md","autoComplete","fullWidth","evt","InputProps","endAdornment","push"],"mappings":"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","file":"static/js/8.e1916676.chunk.js","sourcesContent":["import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useFormStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n    marginedTop: {\n      marginTop: theme.spacing(2),\n    }\n  })\n);\n\nexport default useFormStyles;","import React, { ReactElement } from 'react';\nimport { Box, Typography, CircularProgress } from '@material-ui/core';\n\ntype DataWrapperPropsType<T> = {\n  items: T[] | null,\n  emptyMessage?: string,\n  loadingMessage?: string,\n  children: ReactElement\n}\n\nexport default function DataWrapper<T>(props: DataWrapperPropsType<T>) {\n  const { items, children,\n    emptyMessage = 'There is no data to display',\n    loadingMessage = 'Data is loading'\n  } = props;\n  if (!items) {\n    return (\n      <>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <CircularProgress size={80} />\n        </Box>\n        <Box display=\"flex\" justifyContent=\"center\">\n          <Typography  variant=\"h6\" gutterBottom>{loadingMessage}</Typography>\n        </Box>\n      </>\n    )\n  }\n  if (Array.isArray(items) && items.length === 0) {\n    return (\n      <Box display=\"flex\" justifyContent=\"flex-end\">\n        <Typography  variant=\"h6\" gutterBottom>{emptyMessage}</Typography>\n      </Box>\n    )\n  }\n  return children;\n}","import { useEffect, useRef } from \"react\";\n\nexport default function usePrevious(value: any) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};","import React, { useState, useEffect, ReactElement, useReducer } from 'react';\nimport {\n  Button,\n  Dialog ,\n  DialogActions ,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  List,\n  ListItem,\n  ListItemText\n} from '@material-ui/core';\nimport { hasErrors } from '../globals/error-handling';\nimport BannerAlert from '../components/BannerAlert';\nimport useGraphQL from './use-graphql';\nimport keyGenerate from '../utils/string';\n\ntype MultiDelReturnType = {\n  MultiDelCompo: () => ReactElement,\n  status: string,\n  handleDelete: (ids: string[]) => void\n}\ntype MultiDelPropsType = {\n  resolver: string,\n  collection: Array<any>,\n  getId: (item: any) => string,\n  getItemText: (item: any) => string,\n  modelNames: string\n}\n\ntype ItemsStateType = Pick<MultiDelPropsType,\n  'collection' | 'modelNames' |  'getId' | 'getItemText'> & {\n  ids: string[],\n  modal: string[],\n  banner: string[]\n}\n\ntype ActionType = \n  | { type: 'CLEAN' }\n  | { type: 'UPDATE', payload: string[] }\n\nfunction itemsReducer(\n  state: ItemsStateType,\n  action: ActionType\n) {\n  const {collection, modelNames, getId, getItemText} = state;\n\n  function getDeletionStrings(texts: string[], future: boolean = false): string[] {\n    const verb = (future) ? ' are marked for delete': ' has been deleted';\n    return (texts.length === 0)\n      ? [`There aren't ${modelNames} selected for removal`]\n      : (texts.length < 11)\n        ? [`The following ${modelNames} ${verb}:`, \n          ...texts]\n        : [`${texts.length} ${modelNames} ${verb}`];\n  }\n\n  if(!collection || action.type === 'CLEAN' || collection.length === 0) {\n    return {...state, ids: [], modal: [], banner: []};\n  }\n  // type = 'UPDATE'\n  if (!action?.payload || !Array.isArray(action.payload)) throw new Error('bad request');\n\n  const texts = collection.filter( (item: any) => {\n    return (action.payload as string[]).includes(getId(item));\n  }).map((item: any) => getItemText(item));\n\n  return {\n    ...state,\n    ids: action.payload,\n    modal: getDeletionStrings(texts, true),\n    banner: getDeletionStrings(texts)\n  }\n}\n\nexport default function useMultipleDelete(props: MultiDelPropsType): MultiDelReturnType {\n  const {resolver, modelNames, ...textArgs} = props;\n  const [ status, setStatus ] = useState('inactive');\n  const [ items, dispatchItems ] = useReducer(itemsReducer, {\n    ids: [],\n    modal: [],\n    banner: [],\n    modelNames,\n    ...textArgs\n  });\n  const { data, errors, fetchData} = useGraphQL<number>(0);\n\n  useEffect(() => {\n    if(status === 'send' && items.ids.length > 0) {\n      setStatus('sending');\n      fetchData({expression: `mutation {\n        multipleDelete: ${resolver}(ids: [\"${items.ids.join('\", \"')}\"])\n      }`, isAuth: true});\n    }\n  }, [status, items, resolver, fetchData]);\n\n  useEffect(() => {\n    if(data && data > 0) {\n      setStatus('finalized');\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if(hasErrors(errors)) {\n      setStatus('error')\n    }\n  }, [errors]);\n \n  function handleDelete(ids: string[]) {\n    dispatchItems({type: 'UPDATE', payload: ids});\n    setStatus('confirm');\n  }\n    \n  const MultiDelCompo = () => (\n    <>\n      <Dialog\n        open={status === 'confirm'}\n        onClose={() => setStatus('inactive')}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{`Do you want to permanently remove ${modelNames}?`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\" component='div'>\n            <List dense={true}>\n              {items.modal.map((line) => (\n                <ListItem key={keyGenerate(line, 10)}>\n                  <ListItemText\n                    primary={line}\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            onClick={() => setStatus('inactive')}\n            color=\"secondary\"\n            variant=\"contained\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={() => setStatus('send')}\n            variant=\"contained\"\n            color=\"primary\" \n            autoFocus\n          >\n            Confirm delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <BannerAlert\n        severity=\"success\"\n        isOpen={!!data && data > 0 && status === 'finalized'}\n        closeFn={() => setStatus('inactive')}\n        title={`${modelNames} successfully deleted`}\n        body={items.banner}\n      />\n      <BannerAlert\n        severity=\"error\"\n        isOpen={status === 'error'}\n        closeFn={() => setStatus('inactive')}\n        title={`Error while deleting records of ${modelNames}`}\n        body={errors || 'Server error'}\n      />\n    </>\n  );\n\n  return {status, MultiDelCompo, handleDelete}\n}\n","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  integer: {\r\n    textAlign: 'right',\r\n    width: (props: StyleProps) => props.leftSidePerc + '%'\r\n  },\r\n  decimal: {\r\n    textAlign: 'left'\r\n  }\r\n});\r\n\r\ntype CellProps = {\r\n  value: string,\r\n  leftSidePerc?: number\r\n}\r\n\r\ntype StyleProps = {\r\n  leftSidePerc: number\r\n}\r\n\r\nexport default function CellNumber(props: CellProps) {\r\n  const { value, leftSidePerc = 50} = props;\r\n  const classes = useStyles({leftSidePerc});\r\n  const trimmed: string = value.toString().trim();\r\n  let leftSide, rightSide;\r\n  if (Number.isNaN(Number(trimmed))) {\r\n    leftSide = trimmed;\r\n    rightSide = '';\r\n  } else {\r\n    const decimal = trimmed.toString().match(/([.,]\\d*)$/g);\r\n    leftSide = parseInt(trimmed).toString();\r\n    rightSide = decimal ? decimal[0] : '';\r\n\r\n  }\r\n  return (\r\n    <Box display=\"flex\">\r\n      <div className={classes.integer}>{leftSide}</div>\r\n      <div className={classes.decimal}>{rightSide}</div>\r\n    </Box>\r\n  );\r\n\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { createStyles, lighten, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Toolbar,\r\n  Typography,\r\n  Paper,\r\n  Checkbox,\r\n  IconButton,\r\n  Tooltip,\r\n  FormControlLabel,\r\n  Switch\r\n } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nimport CellNumber from './CellNumber';\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n  order: Order,\r\n  orderBy: Key,\r\n): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\ninterface HeadCell {\r\n  disablePadding: boolean;\r\n  id: string;\r\n  label: string;\r\n  numeric: boolean;\r\n  hidden?: boolean;\r\n}\r\n\r\ninterface EnhancedTableHeadProps {\r\n  classes: ReturnType<typeof useStyles>;\r\n  numSelected: number;\r\n  onRequestSort: (event: React.MouseEvent<unknown>, property: string) => void;\r\n  onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  order: Order;\r\n  orderBy: string;\r\n  rowCount: number;\r\n  headCells: HeadCell[]\r\n}\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableHeadProps) {\r\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, headCells } = props;\r\n  const createSortHandler = (property: string) => (event: React.MouseEvent<unknown>) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{ 'aria-label': 'select all desserts' }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n        <TableCell>\r\n          <EditIcon />\r\n        </TableCell>\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useToolbarStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n      theme.palette.type === 'light'\r\n        ? {\r\n            color: theme.palette.secondary.main,\r\n            backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n          }\r\n        : {\r\n            color: theme.palette.text.primary,\r\n            backgroundColor: theme.palette.secondary.dark,\r\n          },\r\n    title: {\r\n      flex: '1 1 100%',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface EnhancedTableToolbarProps {\r\n  numSelected: number;\r\n  title: string;\r\n  deleteFn: Function,\r\n  addFn: Function\r\n}\r\n \r\nconst EnhancedTableToolbar = (props: EnhancedTableToolbarProps) => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, title, deleteFn, addFn } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n          {title}\r\n        </Typography>\r\n      )}\r\n      {numSelected > 0 ? (\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton aria-label=\"delete\" onClick={() => deleteFn()}>\r\n            <DeleteIcon/>\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <>\r\n          <Tooltip title=\"Filter list\" key=\"add\">\r\n            <IconButton aria-label=\"add\" onClick={() => addFn()}>\r\n              <AddCircleIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n          <Tooltip title=\"Add element\" key=\"filter\">\r\n            <IconButton aria-label=\"filter list\">\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    paper: {\r\n      width: '100%',\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n      minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n      border: 0,\r\n      clip: 'rect(0 0 0 0)',\r\n      height: 1,\r\n      margin: -1,\r\n      overflow: 'hidden',\r\n      padding: 0,\r\n      position: 'absolute',\r\n      top: 20,\r\n      width: 1,\r\n    },\r\n  }),\r\n);\r\n\r\n\r\ninterface EnhancedTableProps {\r\n  rows: {\r\n    [propName: string]: string;\r\n  }[];\r\n  headCells: HeadCell[],\r\n  title: string,\r\n  idName?: string,\r\n  editFn?: (id: string) => any | null\r\n  deleteFn: (ids: string[]) => void\r\n  addFn: () => void\r\n}\r\n\r\nexport default function EnhancedTable(props: EnhancedTableProps) {\r\n  const { rows, headCells, title, editFn = null, idName = '_id', deleteFn, addFn} = props;\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState<Order>('asc');\r\n  const [orderBy, setOrderBy] = React.useState<string>('');\r\n  const [selected, setSelected] = React.useState<string[]>([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense, setDense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event: React.MouseEvent<unknown>, property: string) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.name.toString());\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected: string[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <EnhancedTableToolbar\r\n          numSelected={selected.length}\r\n          title={title}\r\n          deleteFn={() => deleteFn(selected)}\r\n          addFn={() => addFn()}\r\n        />\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row[idName]);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row[idName])}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row[idName]}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\" key={row[idName] + '_id'}>\r\n                        <Checkbox\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      {\r\n                        headCells.filter(head => !head.hidden).map((head) => {\r\n                          if (head.numeric) {\r\n                            return (\r\n                              <TableCell align=\"center\" key={row[idName] + '_' + head.id}>\r\n                                <CellNumber value={row[head.id].toString()} />\r\n                              </TableCell>\r\n                            );\r\n                          }\r\n                          return (<TableCell align=\"right\" key={row[idName] + '_' + head.id}>\r\n                            {row[head.id]}\r\n                          </TableCell>);\r\n                        })\r\n                      }\r\n                      {\r\n                        (editFn) && (\r\n                          <TableCell align=\"center\" key={row[idName] + '_edit'}>\r\n                            <IconButton aria-label=\"edit\" color=\"primary\" onClick={() => editFn(row[idName])}>\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          </TableCell>\r\n                        )\r\n                      }\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Grid,\n  Container,\n  TextField,\n  FormControl,\n  InputAdornment\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { isEqual } from 'lodash';\nimport { useDebounce } from 'use-debounce';\nimport DataWrapper from './DataWrapper';\nimport useGraphQL from '../utils/use-graphql';\nimport usePrevious from '../utils/use-previous';\nimport {BannerError } from '../globals/error-handling';\nimport EnhancedTable from './EnhancedTable';\nimport useFormStyles from '../utils/use-form-styles';\nimport useMultipleDelete from '../utils/use-multiple-delete';\n\ntype RoleType = {\n  roleId: string,\n  name: string,\n  description: string,\n  resolvers: string[]\n}\n\ntype RoleDisplayType = Pick<RoleType, 'roleId' | 'name' | 'description'> & {\n  resolversCount: string\n}\n\nfunction makeListExpression(term: string): string {\n  return `\n    query {\n      roles(search: \"${term}\") {\n        roleId: _id\n        name\n        description\n        resolvers\n      }\n    }\n  `;\n}\n\nconst headCells = [\n  {\n    disablePadding: false,\n    id: 'name',\n    label: 'Name',\n    numeric: false\n  },\n  {\n    disablePadding: false,\n    id: 'description',\n    label: 'Description',\n    numeric: false\n  },\n  {\n    disablePadding: false,\n    id: 'resolversCount',\n    label: 'Actions Enabled',\n    numeric: true\n  }\n];\n\nexport default function Roles() {\n  const [rolesDisplay, setRolesDisplay] = useState<RoleDisplayType[]>([]);\n  const [searchText, setSearchText] = useState('');\n  const [debouncedSearch] = useDebounce(searchText, 1000);\n  const { data, errors, fetchData } = useGraphQL<RoleType[] | null>(null);\n  const prevRolesData = usePrevious(data);\n  const classes = useFormStyles();\n  const {MultiDelCompo, handleDelete} = useMultipleDelete({\n    resolver: 'rolesRemove',\n    collection: data || [],\n    getId: (role: RoleType) => role.roleId,\n    getItemText: (role) => `${role.name}(${role.description})`,\n    modelNames: 'roles'\n  });\n  const mounted = useRef(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    if(!mounted.current) {\n      fetchData({expression: makeListExpression(''), isAuth: true});\n      mounted.current = true;\n    }\n  }, [fetchData]);\n\n  useEffect(() => {\n    fetchData({expression:makeListExpression(debouncedSearch), isAuth: true});\n  }, [fetchData, debouncedSearch]);\n\n  useEffect(() => {\n    if (!isEqual(data, prevRolesData)) {\n      const newRoles: RoleDisplayType[] = (data === null)\n        ? []\n        : data.map(role => {\n          const { resolvers, ...rest} = role;\n          return { ...rest, resolversCount: resolvers.length.toString()};\n        });\n      setRolesDisplay(newRoles);\n    }\n  }, [data, prevRolesData]);\n\n  function handleSearch(evt: React.ChangeEvent<{ value: string }>) {\n    setSearchText(evt.target.value);\n  }\n\n  function handleEdit(id: string) {\n    history.push('/role/' + id);\n  }\n\n  function handleAdd() {\n    history.push('/role/_');\n  }\n\n  return (\n    <Container>\n      <MultiDelCompo />\n      <BannerError\n        message={`Error while fetching records of Roles`}\n        errors={[errors]}\n      />      \n      <Grid container justify=\"flex-end\">\n        <Grid item xs={12} sm={6} md={4}>\n          <FormControl variant=\"outlined\" className={classes.formControl}>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              id=\"search\"\n              label=\"Search by name and description\"\n              autoComplete=\"search\"\n              name=\"search\"\n              autoFocus\n              fullWidth\n              onChange={handleSearch}\n              value={searchText}\n              InputProps={{\n                endAdornment:(\n                  <InputAdornment position=\"end\">\n                    <SearchIcon />\n                  </InputAdornment>\n                )\n              }}\n              \n            />\n          </FormControl>\n        </Grid>\n      </Grid>\n      <DataWrapper<RoleType> items={data}>\n        <EnhancedTable\n          headCells={headCells}\n          rows={rolesDisplay || []}\n          title=\"Roles\"\n          idName=\"roleId\"\n          editFn={handleEdit}\n          deleteFn={handleDelete}\n          addFn={handleAdd}\n        />\n      </DataWrapper>\n\n    </Container>\n  );\n}\n"],"sourceRoot":""}